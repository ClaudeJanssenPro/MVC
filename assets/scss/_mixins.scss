/******************************************************************
Site Name:
Author:

Stylesheet: Mixins & Constants Stylesheet

This is where you can take advantage of Sass' great features:
Mixins & Constants. I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

******************************************************************/

/*********************
CLEARFIXIN'
*********************/

// Contain floats: nicolasgallagher.com/micro-clearfix-hack/
.clearfix {
  zoom: 1;

  &:before, &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

/*********************
TOOLS
*********************/

// BORDER-BOX ALL THE THINGS! (http://paulirish.com/2012/box-sizing-border-box-ftw/)
*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

/*********************
COLORS
Need help w/ choosing your colors? Try this site out:
http://0to255.com/
*********************/

$link-color: #39342d;
$link-hover: darken($link-color, 9%);
$link-visited-color: darken($link-hover, 9%);

$brown: $link-color;
$dark-brown: darken($brown, 5%);
$light-brown: lighten($link-color, 10%);
$text-color: #333;
$black: #222;
$white: #F7F7F7;
$grey: #BBB;
$highlight-color: #b18eaf;
$highlight-color: lighten(#39342d, 10%);

/*
Here's a great tutorial on how to
use color variables properly:
http://sachagreif.com/sass-color-variables/
*/

/*********************
TYPOGRAPHY
*********************/

$sans-serif: "Lato", "Avenir Next", sans-serif;
$serif: "Georgia", Cambria, Times New Roman, Times, serif;

/*
use the best ampersand
http://simplebits.com/notebook/2008/08/14/ampersands-2/
*/
span.amp {
  font-family: Baskerville, calendas_plus, 'Goudy Old Style',Palatino,'Book Antiqua',serif !important;
  font-style: italic;
  font-size: inherit;
  font-weight: normal;
}

// text alignment
.text-left {
  text-align: left;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

/*********************
BORDER RADIUS
*********************/

/*
NOTE: For older browser support (and some mobile),
don't use the shorthand to define *different* corners.

USAGE: @include rounded(4px);

*/
@mixin rounded($radius: 4px) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
}

/*
Instead of having a seperate mixin for the different
borders, we're using the mixin from 320 & Up to make
things easier to use.

USAGE: @include border-radius(4px,4px,0,0);

*/
@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
  -webkit-border-top-right-radius: $topright;
  -webkit-border-bottom-right-radius: $bottomright;
  -webkit-border-bottom-left-radius: $bottomleft;
  -webkit-border-top-left-radius: $topleft;
  -moz-border-radius-topright: $topright;
  -moz-border-radius-bottomright: $bottomright;
  -moz-border-radius-bottomleft: $bottomleft;
  -moz-border-radius-topleft: $topleft;
  border-top-right-radius: $topright;
  border-bottom-right-radius: $bottomright;
  border-bottom-left-radius: $bottomleft;
  border-top-left-radius: $topleft;
  -webkit-background-clip: padding-box;
  -moz-background-clip: padding;
  background-clip: padding-box;
}

/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes: "-webkit", "-ms", "-o", "";

  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }

  transition: $transition;
}

@mixin transform($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes: "-webkit", "-ms", "-o", "";

  @each $prefix in $prefixes {
    #{$prefix}-transform: $transition;
  }

  transform: $transition;
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdue it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
  background-color: $to;
  background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background-image: -webkit-linear-gradient(top, $from, $to);
  background-image: -moz-linear-gradient(top, $from, $to);
  background-image: -o-linear-gradient(top, $from, $to);
  background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
  -webkit-box-sizing: $type;
  -moz-box-sizing: $type;
  -ms-box-sizing: $type;
  box-sizing: $type;
}

/*
	to express font-sizes in REM with a fallback
	see: http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
*/
@mixin font-size($sizeValue: 1.6) {
  font-size: $sizeValue * 10 + px;
  font-size: $sizeValue + rem;
}

@mixin rem($properties...) {
  @each $property in $properties {
    $rem: nth($property, 2) / (nth($property, 2) * 0 + 1);

    //get unitless em/rem
    $px: $rem * 16px;

    #{nth($property, 1)}: $px;
    #{nth($property, 1)}: $rem + rem;
  }
}

/*********************
BUTTONS
*********************/

.button, .button:visited {
  font-family: $sans-serif;
  padding: 0px 12px;
  display: inline-block;
  font-weight: 700;
  text-decoration: none;
  text-align: center;
  cursor: pointer;
  line-height: 21px;

  @include border-radius(5px, 5px, 5px, 5px);

  background: $black;
  color: $white;
  border: 1px solid darken($white, 68%);

  @include transition(all 0.2s ease-in-out);

  &:hover, &:focus {
    background: $white;
    color: $black;
    border-color: $black;

    @include transition(all 0.2s ease-in-out);
  }

  &:active {
    // remove ios/android black overlay on tap events
    // more info: http://www.mobify.com/blog/beginners-guide-to-perceived-performance/
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    border: 1px inset $highlight-color;
    background: $highlight-color;
    color: $white;

    @include transition(all 0.2s ease-in-out);
  }
}
